// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.1
// source: pools.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface ResponsePoolState {
  baseDecimal: number;
  quoteDecimal: number;
  baseTokenAmount: string;
  quoteTokenAmount: string;
  baseTokenAddress: string;
  quoteTokenAddress: string;
  baseMint: string;
  quoteMint: string;
}

export interface ErrorMesssage {
  error: string;
}

export interface RequestPoolState {
  poolData: Uint8Array;
}

export interface ResponsePoolStateOperation {
  error: ErrorMesssage | undefined;
  data: ResponsePoolState | undefined;
}

export interface RequestSwapTokens {
  transactionType: string;
  mint: string;
  amount: number;
  microlamports: number;
  slippage: number;
  privateKey: string;
  closeAccount: boolean;
  swapAll: boolean;
  tokenAccountAddress: string;
  decimal: number;
}

export interface ResponseSwapTokens {
  error: string;
  txSignature: string;
  msTimeTaken: string;
  success: boolean;
}

export interface CreateTokenAccount {
  /** Create token account for this mint */
  mint: string;
  /** Payer and signer of the transaction (wallet private key) */
  privateKey: string;
  /** Associated token account address (public key) */
  ataPublicKey: string;
}

export interface ResponseCreateTokenAccount {
  error: string;
  success: boolean;
  txSignature: string;
  msTimeTaken: string;
}

export interface CloseTokenAccount {
  /** Payer and signer of the transaction (wallet private key) */
  walletPrivateKey: string;
  /** Token account address to close */
  tokenAccountAddress: string;
}

export interface ResponseCloseTokenAccount {
  error: string;
  success: boolean;
  txSignature: string;
  msTimeTaken: string;
}

export interface GetAssociatedTokenAccount {
  /** Mint address for associated token account */
  mintAddress: string;
  /** Wallet public key */
  walletPublicKey: string;
}

export interface ResponseGetAssociatedTokenAccount {
  ataPublicKey: string;
  error: string;
  success: boolean;
  msTimeTaken: string;
}

export interface TransferSolToWallets {
  payerPrivateKey: string;
  walletsAmounts: { [key: string]: number };
}

export interface TransferSolToWallets_WalletsAmountsEntry {
  key: string;
  value: number;
}

export interface ResponseRpcOperation {
  error: string;
  success: boolean;
  msTimeTaken: string;
  rawData: string;
}

export interface ReceiveSolFromWallets {
  /** {wallet_private_key: amount} */
  walletsDatas: { [key: string]: number };
  destinationWalletPublicKey: string;
}

export interface ReceiveSolFromWallets_WalletsDatasEntry {
  key: string;
  value: number;
}

export interface DecodeMoonshotMintInstructionData {
  instructionData: Uint8Array;
}

export interface DecodeMoonshotBuyInstructionData {
  instructionData: Uint8Array;
}

function createBaseResponsePoolState(): ResponsePoolState {
  return {
    baseDecimal: 0,
    quoteDecimal: 0,
    baseTokenAmount: "",
    quoteTokenAmount: "",
    baseTokenAddress: "",
    quoteTokenAddress: "",
    baseMint: "",
    quoteMint: "",
  };
}

export const ResponsePoolState: MessageFns<ResponsePoolState> = {
  encode(message: ResponsePoolState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseDecimal !== 0) {
      writer.uint32(8).int32(message.baseDecimal);
    }
    if (message.quoteDecimal !== 0) {
      writer.uint32(16).int32(message.quoteDecimal);
    }
    if (message.baseTokenAmount !== "") {
      writer.uint32(26).string(message.baseTokenAmount);
    }
    if (message.quoteTokenAmount !== "") {
      writer.uint32(34).string(message.quoteTokenAmount);
    }
    if (message.baseTokenAddress !== "") {
      writer.uint32(42).string(message.baseTokenAddress);
    }
    if (message.quoteTokenAddress !== "") {
      writer.uint32(50).string(message.quoteTokenAddress);
    }
    if (message.baseMint !== "") {
      writer.uint32(58).string(message.baseMint);
    }
    if (message.quoteMint !== "") {
      writer.uint32(66).string(message.quoteMint);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsePoolState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsePoolState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.baseDecimal = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quoteDecimal = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.baseTokenAmount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.quoteTokenAmount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.baseTokenAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.quoteTokenAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.baseMint = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.quoteMint = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsePoolState {
    return {
      baseDecimal: isSet(object.baseDecimal) ? globalThis.Number(object.baseDecimal) : 0,
      quoteDecimal: isSet(object.quoteDecimal) ? globalThis.Number(object.quoteDecimal) : 0,
      baseTokenAmount: isSet(object.baseTokenAmount) ? globalThis.String(object.baseTokenAmount) : "",
      quoteTokenAmount: isSet(object.quoteTokenAmount) ? globalThis.String(object.quoteTokenAmount) : "",
      baseTokenAddress: isSet(object.baseTokenAddress) ? globalThis.String(object.baseTokenAddress) : "",
      quoteTokenAddress: isSet(object.quoteTokenAddress) ? globalThis.String(object.quoteTokenAddress) : "",
      baseMint: isSet(object.baseMint) ? globalThis.String(object.baseMint) : "",
      quoteMint: isSet(object.quoteMint) ? globalThis.String(object.quoteMint) : "",
    };
  },

  toJSON(message: ResponsePoolState): unknown {
    const obj: any = {};
    if (message.baseDecimal !== 0) {
      obj.baseDecimal = Math.round(message.baseDecimal);
    }
    if (message.quoteDecimal !== 0) {
      obj.quoteDecimal = Math.round(message.quoteDecimal);
    }
    if (message.baseTokenAmount !== "") {
      obj.baseTokenAmount = message.baseTokenAmount;
    }
    if (message.quoteTokenAmount !== "") {
      obj.quoteTokenAmount = message.quoteTokenAmount;
    }
    if (message.baseTokenAddress !== "") {
      obj.baseTokenAddress = message.baseTokenAddress;
    }
    if (message.quoteTokenAddress !== "") {
      obj.quoteTokenAddress = message.quoteTokenAddress;
    }
    if (message.baseMint !== "") {
      obj.baseMint = message.baseMint;
    }
    if (message.quoteMint !== "") {
      obj.quoteMint = message.quoteMint;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponsePoolState>, I>>(base?: I): ResponsePoolState {
    return ResponsePoolState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponsePoolState>, I>>(object: I): ResponsePoolState {
    const message = createBaseResponsePoolState();
    message.baseDecimal = object.baseDecimal ?? 0;
    message.quoteDecimal = object.quoteDecimal ?? 0;
    message.baseTokenAmount = object.baseTokenAmount ?? "";
    message.quoteTokenAmount = object.quoteTokenAmount ?? "";
    message.baseTokenAddress = object.baseTokenAddress ?? "";
    message.quoteTokenAddress = object.quoteTokenAddress ?? "";
    message.baseMint = object.baseMint ?? "";
    message.quoteMint = object.quoteMint ?? "";
    return message;
  },
};

function createBaseErrorMesssage(): ErrorMesssage {
  return { error: "" };
}

export const ErrorMesssage: MessageFns<ErrorMesssage> = {
  encode(message: ErrorMesssage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorMesssage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorMesssage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorMesssage {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: ErrorMesssage): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorMesssage>, I>>(base?: I): ErrorMesssage {
    return ErrorMesssage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorMesssage>, I>>(object: I): ErrorMesssage {
    const message = createBaseErrorMesssage();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseRequestPoolState(): RequestPoolState {
  return { poolData: new Uint8Array(0) };
}

export const RequestPoolState: MessageFns<RequestPoolState> = {
  encode(message: RequestPoolState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolData.length !== 0) {
      writer.uint32(10).bytes(message.poolData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPoolState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPoolState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.poolData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestPoolState {
    return { poolData: isSet(object.poolData) ? bytesFromBase64(object.poolData) : new Uint8Array(0) };
  },

  toJSON(message: RequestPoolState): unknown {
    const obj: any = {};
    if (message.poolData.length !== 0) {
      obj.poolData = base64FromBytes(message.poolData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestPoolState>, I>>(base?: I): RequestPoolState {
    return RequestPoolState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestPoolState>, I>>(object: I): RequestPoolState {
    const message = createBaseRequestPoolState();
    message.poolData = object.poolData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseResponsePoolStateOperation(): ResponsePoolStateOperation {
  return { error: undefined, data: undefined };
}

export const ResponsePoolStateOperation: MessageFns<ResponsePoolStateOperation> = {
  encode(message: ResponsePoolStateOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== undefined) {
      ErrorMesssage.encode(message.error, writer.uint32(10).fork()).join();
    }
    if (message.data !== undefined) {
      ResponsePoolState.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsePoolStateOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsePoolStateOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = ErrorMesssage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ResponsePoolState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsePoolStateOperation {
    return {
      error: isSet(object.error) ? ErrorMesssage.fromJSON(object.error) : undefined,
      data: isSet(object.data) ? ResponsePoolState.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ResponsePoolStateOperation): unknown {
    const obj: any = {};
    if (message.error !== undefined) {
      obj.error = ErrorMesssage.toJSON(message.error);
    }
    if (message.data !== undefined) {
      obj.data = ResponsePoolState.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponsePoolStateOperation>, I>>(base?: I): ResponsePoolStateOperation {
    return ResponsePoolStateOperation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponsePoolStateOperation>, I>>(object: I): ResponsePoolStateOperation {
    const message = createBaseResponsePoolStateOperation();
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorMesssage.fromPartial(object.error)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null)
      ? ResponsePoolState.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseRequestSwapTokens(): RequestSwapTokens {
  return {
    transactionType: "",
    mint: "",
    amount: 0,
    microlamports: 0,
    slippage: 0,
    privateKey: "",
    closeAccount: false,
    swapAll: false,
    tokenAccountAddress: "",
    decimal: 0,
  };
}

export const RequestSwapTokens: MessageFns<RequestSwapTokens> = {
  encode(message: RequestSwapTokens, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionType !== "") {
      writer.uint32(10).string(message.transactionType);
    }
    if (message.mint !== "") {
      writer.uint32(18).string(message.mint);
    }
    if (message.amount !== 0) {
      writer.uint32(29).float(message.amount);
    }
    if (message.microlamports !== 0) {
      writer.uint32(37).float(message.microlamports);
    }
    if (message.slippage !== 0) {
      writer.uint32(45).float(message.slippage);
    }
    if (message.privateKey !== "") {
      writer.uint32(50).string(message.privateKey);
    }
    if (message.closeAccount !== false) {
      writer.uint32(56).bool(message.closeAccount);
    }
    if (message.swapAll !== false) {
      writer.uint32(64).bool(message.swapAll);
    }
    if (message.tokenAccountAddress !== "") {
      writer.uint32(74).string(message.tokenAccountAddress);
    }
    if (message.decimal !== 0) {
      writer.uint32(80).int32(message.decimal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestSwapTokens {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestSwapTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mint = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.amount = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.microlamports = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.slippage = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.privateKey = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.closeAccount = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.swapAll = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tokenAccountAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.decimal = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestSwapTokens {
    return {
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      mint: isSet(object.mint) ? globalThis.String(object.mint) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      microlamports: isSet(object.microlamports) ? globalThis.Number(object.microlamports) : 0,
      slippage: isSet(object.slippage) ? globalThis.Number(object.slippage) : 0,
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
      closeAccount: isSet(object.closeAccount) ? globalThis.Boolean(object.closeAccount) : false,
      swapAll: isSet(object.swapAll) ? globalThis.Boolean(object.swapAll) : false,
      tokenAccountAddress: isSet(object.tokenAccountAddress) ? globalThis.String(object.tokenAccountAddress) : "",
      decimal: isSet(object.decimal) ? globalThis.Number(object.decimal) : 0,
    };
  },

  toJSON(message: RequestSwapTokens): unknown {
    const obj: any = {};
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.mint !== "") {
      obj.mint = message.mint;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.microlamports !== 0) {
      obj.microlamports = message.microlamports;
    }
    if (message.slippage !== 0) {
      obj.slippage = message.slippage;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    if (message.closeAccount !== false) {
      obj.closeAccount = message.closeAccount;
    }
    if (message.swapAll !== false) {
      obj.swapAll = message.swapAll;
    }
    if (message.tokenAccountAddress !== "") {
      obj.tokenAccountAddress = message.tokenAccountAddress;
    }
    if (message.decimal !== 0) {
      obj.decimal = Math.round(message.decimal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestSwapTokens>, I>>(base?: I): RequestSwapTokens {
    return RequestSwapTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestSwapTokens>, I>>(object: I): RequestSwapTokens {
    const message = createBaseRequestSwapTokens();
    message.transactionType = object.transactionType ?? "";
    message.mint = object.mint ?? "";
    message.amount = object.amount ?? 0;
    message.microlamports = object.microlamports ?? 0;
    message.slippage = object.slippage ?? 0;
    message.privateKey = object.privateKey ?? "";
    message.closeAccount = object.closeAccount ?? false;
    message.swapAll = object.swapAll ?? false;
    message.tokenAccountAddress = object.tokenAccountAddress ?? "";
    message.decimal = object.decimal ?? 0;
    return message;
  },
};

function createBaseResponseSwapTokens(): ResponseSwapTokens {
  return { error: "", txSignature: "", msTimeTaken: "", success: false };
}

export const ResponseSwapTokens: MessageFns<ResponseSwapTokens> = {
  encode(message: ResponseSwapTokens, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.txSignature !== "") {
      writer.uint32(18).string(message.txSignature);
    }
    if (message.msTimeTaken !== "") {
      writer.uint32(26).string(message.msTimeTaken);
    }
    if (message.success !== false) {
      writer.uint32(32).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseSwapTokens {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseSwapTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txSignature = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msTimeTaken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseSwapTokens {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      txSignature: isSet(object.txSignature) ? globalThis.String(object.txSignature) : "",
      msTimeTaken: isSet(object.msTimeTaken) ? globalThis.String(object.msTimeTaken) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: ResponseSwapTokens): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.txSignature !== "") {
      obj.txSignature = message.txSignature;
    }
    if (message.msTimeTaken !== "") {
      obj.msTimeTaken = message.msTimeTaken;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseSwapTokens>, I>>(base?: I): ResponseSwapTokens {
    return ResponseSwapTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseSwapTokens>, I>>(object: I): ResponseSwapTokens {
    const message = createBaseResponseSwapTokens();
    message.error = object.error ?? "";
    message.txSignature = object.txSignature ?? "";
    message.msTimeTaken = object.msTimeTaken ?? "";
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCreateTokenAccount(): CreateTokenAccount {
  return { mint: "", privateKey: "", ataPublicKey: "" };
}

export const CreateTokenAccount: MessageFns<CreateTokenAccount> = {
  encode(message: CreateTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mint !== "") {
      writer.uint32(10).string(message.mint);
    }
    if (message.privateKey !== "") {
      writer.uint32(18).string(message.privateKey);
    }
    if (message.ataPublicKey !== "") {
      writer.uint32(26).string(message.ataPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mint = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.privateKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ataPublicKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTokenAccount {
    return {
      mint: isSet(object.mint) ? globalThis.String(object.mint) : "",
      privateKey: isSet(object.privateKey) ? globalThis.String(object.privateKey) : "",
      ataPublicKey: isSet(object.ataPublicKey) ? globalThis.String(object.ataPublicKey) : "",
    };
  },

  toJSON(message: CreateTokenAccount): unknown {
    const obj: any = {};
    if (message.mint !== "") {
      obj.mint = message.mint;
    }
    if (message.privateKey !== "") {
      obj.privateKey = message.privateKey;
    }
    if (message.ataPublicKey !== "") {
      obj.ataPublicKey = message.ataPublicKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTokenAccount>, I>>(base?: I): CreateTokenAccount {
    return CreateTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTokenAccount>, I>>(object: I): CreateTokenAccount {
    const message = createBaseCreateTokenAccount();
    message.mint = object.mint ?? "";
    message.privateKey = object.privateKey ?? "";
    message.ataPublicKey = object.ataPublicKey ?? "";
    return message;
  },
};

function createBaseResponseCreateTokenAccount(): ResponseCreateTokenAccount {
  return { error: "", success: false, txSignature: "", msTimeTaken: "" };
}

export const ResponseCreateTokenAccount: MessageFns<ResponseCreateTokenAccount> = {
  encode(message: ResponseCreateTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.txSignature !== "") {
      writer.uint32(26).string(message.txSignature);
    }
    if (message.msTimeTaken !== "") {
      writer.uint32(34).string(message.msTimeTaken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseCreateTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseCreateTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txSignature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.msTimeTaken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseCreateTokenAccount {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      txSignature: isSet(object.txSignature) ? globalThis.String(object.txSignature) : "",
      msTimeTaken: isSet(object.msTimeTaken) ? globalThis.String(object.msTimeTaken) : "",
    };
  },

  toJSON(message: ResponseCreateTokenAccount): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.txSignature !== "") {
      obj.txSignature = message.txSignature;
    }
    if (message.msTimeTaken !== "") {
      obj.msTimeTaken = message.msTimeTaken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseCreateTokenAccount>, I>>(base?: I): ResponseCreateTokenAccount {
    return ResponseCreateTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseCreateTokenAccount>, I>>(object: I): ResponseCreateTokenAccount {
    const message = createBaseResponseCreateTokenAccount();
    message.error = object.error ?? "";
    message.success = object.success ?? false;
    message.txSignature = object.txSignature ?? "";
    message.msTimeTaken = object.msTimeTaken ?? "";
    return message;
  },
};

function createBaseCloseTokenAccount(): CloseTokenAccount {
  return { walletPrivateKey: "", tokenAccountAddress: "" };
}

export const CloseTokenAccount: MessageFns<CloseTokenAccount> = {
  encode(message: CloseTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.walletPrivateKey !== "") {
      writer.uint32(10).string(message.walletPrivateKey);
    }
    if (message.tokenAccountAddress !== "") {
      writer.uint32(18).string(message.tokenAccountAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.walletPrivateKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenAccountAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloseTokenAccount {
    return {
      walletPrivateKey: isSet(object.walletPrivateKey) ? globalThis.String(object.walletPrivateKey) : "",
      tokenAccountAddress: isSet(object.tokenAccountAddress) ? globalThis.String(object.tokenAccountAddress) : "",
    };
  },

  toJSON(message: CloseTokenAccount): unknown {
    const obj: any = {};
    if (message.walletPrivateKey !== "") {
      obj.walletPrivateKey = message.walletPrivateKey;
    }
    if (message.tokenAccountAddress !== "") {
      obj.tokenAccountAddress = message.tokenAccountAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CloseTokenAccount>, I>>(base?: I): CloseTokenAccount {
    return CloseTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloseTokenAccount>, I>>(object: I): CloseTokenAccount {
    const message = createBaseCloseTokenAccount();
    message.walletPrivateKey = object.walletPrivateKey ?? "";
    message.tokenAccountAddress = object.tokenAccountAddress ?? "";
    return message;
  },
};

function createBaseResponseCloseTokenAccount(): ResponseCloseTokenAccount {
  return { error: "", success: false, txSignature: "", msTimeTaken: "" };
}

export const ResponseCloseTokenAccount: MessageFns<ResponseCloseTokenAccount> = {
  encode(message: ResponseCloseTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.txSignature !== "") {
      writer.uint32(26).string(message.txSignature);
    }
    if (message.msTimeTaken !== "") {
      writer.uint32(34).string(message.msTimeTaken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseCloseTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseCloseTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txSignature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.msTimeTaken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseCloseTokenAccount {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      txSignature: isSet(object.txSignature) ? globalThis.String(object.txSignature) : "",
      msTimeTaken: isSet(object.msTimeTaken) ? globalThis.String(object.msTimeTaken) : "",
    };
  },

  toJSON(message: ResponseCloseTokenAccount): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.txSignature !== "") {
      obj.txSignature = message.txSignature;
    }
    if (message.msTimeTaken !== "") {
      obj.msTimeTaken = message.msTimeTaken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseCloseTokenAccount>, I>>(base?: I): ResponseCloseTokenAccount {
    return ResponseCloseTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseCloseTokenAccount>, I>>(object: I): ResponseCloseTokenAccount {
    const message = createBaseResponseCloseTokenAccount();
    message.error = object.error ?? "";
    message.success = object.success ?? false;
    message.txSignature = object.txSignature ?? "";
    message.msTimeTaken = object.msTimeTaken ?? "";
    return message;
  },
};

function createBaseGetAssociatedTokenAccount(): GetAssociatedTokenAccount {
  return { mintAddress: "", walletPublicKey: "" };
}

export const GetAssociatedTokenAccount: MessageFns<GetAssociatedTokenAccount> = {
  encode(message: GetAssociatedTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintAddress !== "") {
      writer.uint32(10).string(message.mintAddress);
    }
    if (message.walletPublicKey !== "") {
      writer.uint32(18).string(message.walletPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssociatedTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssociatedTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.walletPublicKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssociatedTokenAccount {
    return {
      mintAddress: isSet(object.mintAddress) ? globalThis.String(object.mintAddress) : "",
      walletPublicKey: isSet(object.walletPublicKey) ? globalThis.String(object.walletPublicKey) : "",
    };
  },

  toJSON(message: GetAssociatedTokenAccount): unknown {
    const obj: any = {};
    if (message.mintAddress !== "") {
      obj.mintAddress = message.mintAddress;
    }
    if (message.walletPublicKey !== "") {
      obj.walletPublicKey = message.walletPublicKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssociatedTokenAccount>, I>>(base?: I): GetAssociatedTokenAccount {
    return GetAssociatedTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssociatedTokenAccount>, I>>(object: I): GetAssociatedTokenAccount {
    const message = createBaseGetAssociatedTokenAccount();
    message.mintAddress = object.mintAddress ?? "";
    message.walletPublicKey = object.walletPublicKey ?? "";
    return message;
  },
};

function createBaseResponseGetAssociatedTokenAccount(): ResponseGetAssociatedTokenAccount {
  return { ataPublicKey: "", error: "", success: false, msTimeTaken: "" };
}

export const ResponseGetAssociatedTokenAccount: MessageFns<ResponseGetAssociatedTokenAccount> = {
  encode(message: ResponseGetAssociatedTokenAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ataPublicKey !== "") {
      writer.uint32(10).string(message.ataPublicKey);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    if (message.success !== false) {
      writer.uint32(24).bool(message.success);
    }
    if (message.msTimeTaken !== "") {
      writer.uint32(34).string(message.msTimeTaken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseGetAssociatedTokenAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseGetAssociatedTokenAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ataPublicKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.msTimeTaken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseGetAssociatedTokenAccount {
    return {
      ataPublicKey: isSet(object.ataPublicKey) ? globalThis.String(object.ataPublicKey) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      msTimeTaken: isSet(object.msTimeTaken) ? globalThis.String(object.msTimeTaken) : "",
    };
  },

  toJSON(message: ResponseGetAssociatedTokenAccount): unknown {
    const obj: any = {};
    if (message.ataPublicKey !== "") {
      obj.ataPublicKey = message.ataPublicKey;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.msTimeTaken !== "") {
      obj.msTimeTaken = message.msTimeTaken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseGetAssociatedTokenAccount>, I>>(
    base?: I,
  ): ResponseGetAssociatedTokenAccount {
    return ResponseGetAssociatedTokenAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseGetAssociatedTokenAccount>, I>>(
    object: I,
  ): ResponseGetAssociatedTokenAccount {
    const message = createBaseResponseGetAssociatedTokenAccount();
    message.ataPublicKey = object.ataPublicKey ?? "";
    message.error = object.error ?? "";
    message.success = object.success ?? false;
    message.msTimeTaken = object.msTimeTaken ?? "";
    return message;
  },
};

function createBaseTransferSolToWallets(): TransferSolToWallets {
  return { payerPrivateKey: "", walletsAmounts: {} };
}

export const TransferSolToWallets: MessageFns<TransferSolToWallets> = {
  encode(message: TransferSolToWallets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payerPrivateKey !== "") {
      writer.uint32(10).string(message.payerPrivateKey);
    }
    Object.entries(message.walletsAmounts).forEach(([key, value]) => {
      TransferSolToWallets_WalletsAmountsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferSolToWallets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferSolToWallets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payerPrivateKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = TransferSolToWallets_WalletsAmountsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.walletsAmounts[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferSolToWallets {
    return {
      payerPrivateKey: isSet(object.payerPrivateKey) ? globalThis.String(object.payerPrivateKey) : "",
      walletsAmounts: isObject(object.walletsAmounts)
        ? Object.entries(object.walletsAmounts).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TransferSolToWallets): unknown {
    const obj: any = {};
    if (message.payerPrivateKey !== "") {
      obj.payerPrivateKey = message.payerPrivateKey;
    }
    if (message.walletsAmounts) {
      const entries = Object.entries(message.walletsAmounts);
      if (entries.length > 0) {
        obj.walletsAmounts = {};
        entries.forEach(([k, v]) => {
          obj.walletsAmounts[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferSolToWallets>, I>>(base?: I): TransferSolToWallets {
    return TransferSolToWallets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferSolToWallets>, I>>(object: I): TransferSolToWallets {
    const message = createBaseTransferSolToWallets();
    message.payerPrivateKey = object.payerPrivateKey ?? "";
    message.walletsAmounts = Object.entries(object.walletsAmounts ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTransferSolToWallets_WalletsAmountsEntry(): TransferSolToWallets_WalletsAmountsEntry {
  return { key: "", value: 0 };
}

export const TransferSolToWallets_WalletsAmountsEntry: MessageFns<TransferSolToWallets_WalletsAmountsEntry> = {
  encode(message: TransferSolToWallets_WalletsAmountsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferSolToWallets_WalletsAmountsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferSolToWallets_WalletsAmountsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferSolToWallets_WalletsAmountsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: TransferSolToWallets_WalletsAmountsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferSolToWallets_WalletsAmountsEntry>, I>>(
    base?: I,
  ): TransferSolToWallets_WalletsAmountsEntry {
    return TransferSolToWallets_WalletsAmountsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferSolToWallets_WalletsAmountsEntry>, I>>(
    object: I,
  ): TransferSolToWallets_WalletsAmountsEntry {
    const message = createBaseTransferSolToWallets_WalletsAmountsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseResponseRpcOperation(): ResponseRpcOperation {
  return { error: "", success: false, msTimeTaken: "", rawData: "" };
}

export const ResponseRpcOperation: MessageFns<ResponseRpcOperation> = {
  encode(message: ResponseRpcOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    if (message.msTimeTaken !== "") {
      writer.uint32(26).string(message.msTimeTaken);
    }
    if (message.rawData !== "") {
      writer.uint32(34).string(message.rawData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseRpcOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseRpcOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msTimeTaken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rawData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseRpcOperation {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      msTimeTaken: isSet(object.msTimeTaken) ? globalThis.String(object.msTimeTaken) : "",
      rawData: isSet(object.rawData) ? globalThis.String(object.rawData) : "",
    };
  },

  toJSON(message: ResponseRpcOperation): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.msTimeTaken !== "") {
      obj.msTimeTaken = message.msTimeTaken;
    }
    if (message.rawData !== "") {
      obj.rawData = message.rawData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseRpcOperation>, I>>(base?: I): ResponseRpcOperation {
    return ResponseRpcOperation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseRpcOperation>, I>>(object: I): ResponseRpcOperation {
    const message = createBaseResponseRpcOperation();
    message.error = object.error ?? "";
    message.success = object.success ?? false;
    message.msTimeTaken = object.msTimeTaken ?? "";
    message.rawData = object.rawData ?? "";
    return message;
  },
};

function createBaseReceiveSolFromWallets(): ReceiveSolFromWallets {
  return { walletsDatas: {}, destinationWalletPublicKey: "" };
}

export const ReceiveSolFromWallets: MessageFns<ReceiveSolFromWallets> = {
  encode(message: ReceiveSolFromWallets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.walletsDatas).forEach(([key, value]) => {
      ReceiveSolFromWallets_WalletsDatasEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.destinationWalletPublicKey !== "") {
      writer.uint32(18).string(message.destinationWalletPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiveSolFromWallets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiveSolFromWallets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ReceiveSolFromWallets_WalletsDatasEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.walletsDatas[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationWalletPublicKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiveSolFromWallets {
    return {
      walletsDatas: isObject(object.walletsDatas)
        ? Object.entries(object.walletsDatas).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      destinationWalletPublicKey: isSet(object.destinationWalletPublicKey)
        ? globalThis.String(object.destinationWalletPublicKey)
        : "",
    };
  },

  toJSON(message: ReceiveSolFromWallets): unknown {
    const obj: any = {};
    if (message.walletsDatas) {
      const entries = Object.entries(message.walletsDatas);
      if (entries.length > 0) {
        obj.walletsDatas = {};
        entries.forEach(([k, v]) => {
          obj.walletsDatas[k] = v;
        });
      }
    }
    if (message.destinationWalletPublicKey !== "") {
      obj.destinationWalletPublicKey = message.destinationWalletPublicKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceiveSolFromWallets>, I>>(base?: I): ReceiveSolFromWallets {
    return ReceiveSolFromWallets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceiveSolFromWallets>, I>>(object: I): ReceiveSolFromWallets {
    const message = createBaseReceiveSolFromWallets();
    message.walletsDatas = Object.entries(object.walletsDatas ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.destinationWalletPublicKey = object.destinationWalletPublicKey ?? "";
    return message;
  },
};

function createBaseReceiveSolFromWallets_WalletsDatasEntry(): ReceiveSolFromWallets_WalletsDatasEntry {
  return { key: "", value: 0 };
}

export const ReceiveSolFromWallets_WalletsDatasEntry: MessageFns<ReceiveSolFromWallets_WalletsDatasEntry> = {
  encode(message: ReceiveSolFromWallets_WalletsDatasEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReceiveSolFromWallets_WalletsDatasEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReceiveSolFromWallets_WalletsDatasEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReceiveSolFromWallets_WalletsDatasEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: ReceiveSolFromWallets_WalletsDatasEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReceiveSolFromWallets_WalletsDatasEntry>, I>>(
    base?: I,
  ): ReceiveSolFromWallets_WalletsDatasEntry {
    return ReceiveSolFromWallets_WalletsDatasEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReceiveSolFromWallets_WalletsDatasEntry>, I>>(
    object: I,
  ): ReceiveSolFromWallets_WalletsDatasEntry {
    const message = createBaseReceiveSolFromWallets_WalletsDatasEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseDecodeMoonshotMintInstructionData(): DecodeMoonshotMintInstructionData {
  return { instructionData: new Uint8Array(0) };
}

export const DecodeMoonshotMintInstructionData: MessageFns<DecodeMoonshotMintInstructionData> = {
  encode(message: DecodeMoonshotMintInstructionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instructionData.length !== 0) {
      writer.uint32(10).bytes(message.instructionData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DecodeMoonshotMintInstructionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecodeMoonshotMintInstructionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instructionData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecodeMoonshotMintInstructionData {
    return {
      instructionData: isSet(object.instructionData) ? bytesFromBase64(object.instructionData) : new Uint8Array(0),
    };
  },

  toJSON(message: DecodeMoonshotMintInstructionData): unknown {
    const obj: any = {};
    if (message.instructionData.length !== 0) {
      obj.instructionData = base64FromBytes(message.instructionData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DecodeMoonshotMintInstructionData>, I>>(
    base?: I,
  ): DecodeMoonshotMintInstructionData {
    return DecodeMoonshotMintInstructionData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DecodeMoonshotMintInstructionData>, I>>(
    object: I,
  ): DecodeMoonshotMintInstructionData {
    const message = createBaseDecodeMoonshotMintInstructionData();
    message.instructionData = object.instructionData ?? new Uint8Array(0);
    return message;
  },
};

function createBaseDecodeMoonshotBuyInstructionData(): DecodeMoonshotBuyInstructionData {
  return { instructionData: new Uint8Array(0) };
}

export const DecodeMoonshotBuyInstructionData: MessageFns<DecodeMoonshotBuyInstructionData> = {
  encode(message: DecodeMoonshotBuyInstructionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instructionData.length !== 0) {
      writer.uint32(10).bytes(message.instructionData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DecodeMoonshotBuyInstructionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecodeMoonshotBuyInstructionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instructionData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecodeMoonshotBuyInstructionData {
    return {
      instructionData: isSet(object.instructionData) ? bytesFromBase64(object.instructionData) : new Uint8Array(0),
    };
  },

  toJSON(message: DecodeMoonshotBuyInstructionData): unknown {
    const obj: any = {};
    if (message.instructionData.length !== 0) {
      obj.instructionData = base64FromBytes(message.instructionData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DecodeMoonshotBuyInstructionData>, I>>(
    base?: I,
  ): DecodeMoonshotBuyInstructionData {
    return DecodeMoonshotBuyInstructionData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DecodeMoonshotBuyInstructionData>, I>>(
    object: I,
  ): DecodeMoonshotBuyInstructionData {
    const message = createBaseDecodeMoonshotBuyInstructionData();
    message.instructionData = object.instructionData ?? new Uint8Array(0);
    return message;
  },
};

export type PoolStateService = typeof PoolStateService;
export const PoolStateService = {
  getPoolState: {
    path: "/PoolState/getPoolState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestPoolState) => Buffer.from(RequestPoolState.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RequestPoolState.decode(value),
    responseSerialize: (value: ResponsePoolStateOperation) =>
      Buffer.from(ResponsePoolStateOperation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponsePoolStateOperation.decode(value),
  },
} as const;

export interface PoolStateServer extends UntypedServiceImplementation {
  getPoolState: handleUnaryCall<RequestPoolState, ResponsePoolStateOperation>;
}

export interface PoolStateClient extends Client {
  getPoolState(
    request: RequestPoolState,
    callback: (error: ServiceError | null, response: ResponsePoolStateOperation) => void,
  ): ClientUnaryCall;
  getPoolState(
    request: RequestPoolState,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponsePoolStateOperation) => void,
  ): ClientUnaryCall;
  getPoolState(
    request: RequestPoolState,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponsePoolStateOperation) => void,
  ): ClientUnaryCall;
}

export const PoolStateClient = makeGenericClientConstructor(PoolStateService, "PoolState") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PoolStateClient;
  service: typeof PoolStateService;
  serviceName: string;
};

export type TokensSolanaService = typeof TokensSolanaService;
export const TokensSolanaService = {
  swapTokens: {
    path: "/TokensSolana/swapTokens",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestSwapTokens) => Buffer.from(RequestSwapTokens.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RequestSwapTokens.decode(value),
    responseSerialize: (value: ResponseSwapTokens) => Buffer.from(ResponseSwapTokens.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseSwapTokens.decode(value),
  },
  createTokenAccount: {
    path: "/TokensSolana/createTokenAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTokenAccount) => Buffer.from(CreateTokenAccount.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateTokenAccount.decode(value),
    responseSerialize: (value: ResponseCreateTokenAccount) =>
      Buffer.from(ResponseCreateTokenAccount.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseCreateTokenAccount.decode(value),
  },
  closeTokenAccount: {
    path: "/TokensSolana/closeTokenAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CloseTokenAccount) => Buffer.from(CloseTokenAccount.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CloseTokenAccount.decode(value),
    responseSerialize: (value: ResponseCloseTokenAccount) =>
      Buffer.from(ResponseCloseTokenAccount.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseCloseTokenAccount.decode(value),
  },
  getAssociatedTokenAccount: {
    path: "/TokensSolana/getAssociatedTokenAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssociatedTokenAccount) =>
      Buffer.from(GetAssociatedTokenAccount.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAssociatedTokenAccount.decode(value),
    responseSerialize: (value: ResponseGetAssociatedTokenAccount) =>
      Buffer.from(ResponseGetAssociatedTokenAccount.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseGetAssociatedTokenAccount.decode(value),
  },
  transferSolToWallets: {
    path: "/TokensSolana/transferSolToWallets",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TransferSolToWallets) => Buffer.from(TransferSolToWallets.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TransferSolToWallets.decode(value),
    responseSerialize: (value: ResponseRpcOperation) => Buffer.from(ResponseRpcOperation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseRpcOperation.decode(value),
  },
  receiveSolFromWallets: {
    path: "/TokensSolana/receiveSolFromWallets",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReceiveSolFromWallets) => Buffer.from(ReceiveSolFromWallets.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReceiveSolFromWallets.decode(value),
    responseSerialize: (value: ResponseRpcOperation) => Buffer.from(ResponseRpcOperation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseRpcOperation.decode(value),
  },
  decodeMoonshotMintInstruction: {
    path: "/TokensSolana/decodeMoonshotMintInstruction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DecodeMoonshotMintInstructionData) =>
      Buffer.from(DecodeMoonshotMintInstructionData.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DecodeMoonshotMintInstructionData.decode(value),
    responseSerialize: (value: ResponseRpcOperation) => Buffer.from(ResponseRpcOperation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseRpcOperation.decode(value),
  },
  decodeMoonshotBuyInstruction: {
    path: "/TokensSolana/decodeMoonshotBuyInstruction",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DecodeMoonshotBuyInstructionData) =>
      Buffer.from(DecodeMoonshotBuyInstructionData.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DecodeMoonshotBuyInstructionData.decode(value),
    responseSerialize: (value: ResponseRpcOperation) => Buffer.from(ResponseRpcOperation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponseRpcOperation.decode(value),
  },
} as const;

export interface TokensSolanaServer extends UntypedServiceImplementation {
  swapTokens: handleUnaryCall<RequestSwapTokens, ResponseSwapTokens>;
  createTokenAccount: handleUnaryCall<CreateTokenAccount, ResponseCreateTokenAccount>;
  closeTokenAccount: handleUnaryCall<CloseTokenAccount, ResponseCloseTokenAccount>;
  getAssociatedTokenAccount: handleUnaryCall<GetAssociatedTokenAccount, ResponseGetAssociatedTokenAccount>;
  transferSolToWallets: handleUnaryCall<TransferSolToWallets, ResponseRpcOperation>;
  receiveSolFromWallets: handleUnaryCall<ReceiveSolFromWallets, ResponseRpcOperation>;
  decodeMoonshotMintInstruction: handleUnaryCall<DecodeMoonshotMintInstructionData, ResponseRpcOperation>;
  decodeMoonshotBuyInstruction: handleUnaryCall<DecodeMoonshotBuyInstructionData, ResponseRpcOperation>;
}

export interface TokensSolanaClient extends Client {
  swapTokens(
    request: RequestSwapTokens,
    callback: (error: ServiceError | null, response: ResponseSwapTokens) => void,
  ): ClientUnaryCall;
  swapTokens(
    request: RequestSwapTokens,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseSwapTokens) => void,
  ): ClientUnaryCall;
  swapTokens(
    request: RequestSwapTokens,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseSwapTokens) => void,
  ): ClientUnaryCall;
  createTokenAccount(
    request: CreateTokenAccount,
    callback: (error: ServiceError | null, response: ResponseCreateTokenAccount) => void,
  ): ClientUnaryCall;
  createTokenAccount(
    request: CreateTokenAccount,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseCreateTokenAccount) => void,
  ): ClientUnaryCall;
  createTokenAccount(
    request: CreateTokenAccount,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseCreateTokenAccount) => void,
  ): ClientUnaryCall;
  closeTokenAccount(
    request: CloseTokenAccount,
    callback: (error: ServiceError | null, response: ResponseCloseTokenAccount) => void,
  ): ClientUnaryCall;
  closeTokenAccount(
    request: CloseTokenAccount,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseCloseTokenAccount) => void,
  ): ClientUnaryCall;
  closeTokenAccount(
    request: CloseTokenAccount,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseCloseTokenAccount) => void,
  ): ClientUnaryCall;
  getAssociatedTokenAccount(
    request: GetAssociatedTokenAccount,
    callback: (error: ServiceError | null, response: ResponseGetAssociatedTokenAccount) => void,
  ): ClientUnaryCall;
  getAssociatedTokenAccount(
    request: GetAssociatedTokenAccount,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseGetAssociatedTokenAccount) => void,
  ): ClientUnaryCall;
  getAssociatedTokenAccount(
    request: GetAssociatedTokenAccount,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseGetAssociatedTokenAccount) => void,
  ): ClientUnaryCall;
  transferSolToWallets(
    request: TransferSolToWallets,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  transferSolToWallets(
    request: TransferSolToWallets,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  transferSolToWallets(
    request: TransferSolToWallets,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  receiveSolFromWallets(
    request: ReceiveSolFromWallets,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  receiveSolFromWallets(
    request: ReceiveSolFromWallets,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  receiveSolFromWallets(
    request: ReceiveSolFromWallets,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotMintInstruction(
    request: DecodeMoonshotMintInstructionData,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotMintInstruction(
    request: DecodeMoonshotMintInstructionData,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotMintInstruction(
    request: DecodeMoonshotMintInstructionData,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotBuyInstruction(
    request: DecodeMoonshotBuyInstructionData,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotBuyInstruction(
    request: DecodeMoonshotBuyInstructionData,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
  decodeMoonshotBuyInstruction(
    request: DecodeMoonshotBuyInstructionData,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponseRpcOperation) => void,
  ): ClientUnaryCall;
}

export const TokensSolanaClient = makeGenericClientConstructor(TokensSolanaService, "TokensSolana") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TokensSolanaClient;
  service: typeof TokensSolanaService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
