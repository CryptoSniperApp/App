// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: pools.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface ResponsePoolState {
  baseDecimal: number;
  quoteDecimal: number;
  baseTokenAmount: string;
  quoteTokenAmount: string;
  poolAddress: string;
  baseTokenAddress: string;
  quoteTokenAddress: string;
}

export interface ErrorMesssage {
  error: string;
}

export interface RequestPoolState {
  poolAddress: string;
}

function createBaseResponsePoolState(): ResponsePoolState {
  return {
    baseDecimal: 0,
    quoteDecimal: 0,
    baseTokenAmount: "",
    quoteTokenAmount: "",
    poolAddress: "",
    baseTokenAddress: "",
    quoteTokenAddress: "",
  };
}

export const ResponsePoolState = {
  encode(message: ResponsePoolState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseDecimal !== 0) {
      writer.uint32(8).int32(message.baseDecimal);
    }
    if (message.quoteDecimal !== 0) {
      writer.uint32(16).int32(message.quoteDecimal);
    }
    if (message.baseTokenAmount !== "") {
      writer.uint32(26).string(message.baseTokenAmount);
    }
    if (message.quoteTokenAmount !== "") {
      writer.uint32(34).string(message.quoteTokenAmount);
    }
    if (message.poolAddress !== "") {
      writer.uint32(42).string(message.poolAddress);
    }
    if (message.baseTokenAddress !== "") {
      writer.uint32(50).string(message.baseTokenAddress);
    }
    if (message.quoteTokenAddress !== "") {
      writer.uint32(58).string(message.quoteTokenAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponsePoolState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponsePoolState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.baseDecimal = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.quoteDecimal = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.baseTokenAmount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.quoteTokenAmount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.poolAddress = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.baseTokenAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.quoteTokenAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponsePoolState {
    return {
      baseDecimal: isSet(object.baseDecimal) ? globalThis.Number(object.baseDecimal) : 0,
      quoteDecimal: isSet(object.quoteDecimal) ? globalThis.Number(object.quoteDecimal) : 0,
      baseTokenAmount: isSet(object.baseTokenAmount) ? globalThis.String(object.baseTokenAmount) : "",
      quoteTokenAmount: isSet(object.quoteTokenAmount) ? globalThis.String(object.quoteTokenAmount) : "",
      poolAddress: isSet(object.poolAddress) ? globalThis.String(object.poolAddress) : "",
      baseTokenAddress: isSet(object.baseTokenAddress) ? globalThis.String(object.baseTokenAddress) : "",
      quoteTokenAddress: isSet(object.quoteTokenAddress) ? globalThis.String(object.quoteTokenAddress) : "",
    };
  },

  toJSON(message: ResponsePoolState): unknown {
    const obj: any = {};
    if (message.baseDecimal !== 0) {
      obj.baseDecimal = Math.round(message.baseDecimal);
    }
    if (message.quoteDecimal !== 0) {
      obj.quoteDecimal = Math.round(message.quoteDecimal);
    }
    if (message.baseTokenAmount !== "") {
      obj.baseTokenAmount = message.baseTokenAmount;
    }
    if (message.quoteTokenAmount !== "") {
      obj.quoteTokenAmount = message.quoteTokenAmount;
    }
    if (message.poolAddress !== "") {
      obj.poolAddress = message.poolAddress;
    }
    if (message.baseTokenAddress !== "") {
      obj.baseTokenAddress = message.baseTokenAddress;
    }
    if (message.quoteTokenAddress !== "") {
      obj.quoteTokenAddress = message.quoteTokenAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponsePoolState>, I>>(base?: I): ResponsePoolState {
    return ResponsePoolState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponsePoolState>, I>>(object: I): ResponsePoolState {
    const message = createBaseResponsePoolState();
    message.baseDecimal = object.baseDecimal ?? 0;
    message.quoteDecimal = object.quoteDecimal ?? 0;
    message.baseTokenAmount = object.baseTokenAmount ?? "";
    message.quoteTokenAmount = object.quoteTokenAmount ?? "";
    message.poolAddress = object.poolAddress ?? "";
    message.baseTokenAddress = object.baseTokenAddress ?? "";
    message.quoteTokenAddress = object.quoteTokenAddress ?? "";
    return message;
  },
};

function createBaseErrorMesssage(): ErrorMesssage {
  return { error: "" };
}

export const ErrorMesssage = {
  encode(message: ErrorMesssage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ErrorMesssage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorMesssage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorMesssage {
    return { error: isSet(object.error) ? globalThis.String(object.error) : "" };
  },

  toJSON(message: ErrorMesssage): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorMesssage>, I>>(base?: I): ErrorMesssage {
    return ErrorMesssage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorMesssage>, I>>(object: I): ErrorMesssage {
    const message = createBaseErrorMesssage();
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseRequestPoolState(): RequestPoolState {
  return { poolAddress: "" };
}

export const RequestPoolState = {
  encode(message: RequestPoolState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolAddress !== "") {
      writer.uint32(10).string(message.poolAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPoolState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPoolState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.poolAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestPoolState {
    return { poolAddress: isSet(object.poolAddress) ? globalThis.String(object.poolAddress) : "" };
  },

  toJSON(message: RequestPoolState): unknown {
    const obj: any = {};
    if (message.poolAddress !== "") {
      obj.poolAddress = message.poolAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestPoolState>, I>>(base?: I): RequestPoolState {
    return RequestPoolState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestPoolState>, I>>(object: I): RequestPoolState {
    const message = createBaseRequestPoolState();
    message.poolAddress = object.poolAddress ?? "";
    return message;
  },
};

export type PoolStateService = typeof PoolStateService;
export const PoolStateService = {
  getPoolState: {
    path: "/PoolState/getPoolState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestPoolState) => Buffer.from(RequestPoolState.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RequestPoolState.decode(value),
    responseSerialize: (value: ResponsePoolState) => Buffer.from(ResponsePoolState.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ResponsePoolState.decode(value),
  },
} as const;

export interface PoolStateServer extends UntypedServiceImplementation {
  getPoolState: handleUnaryCall<RequestPoolState, ResponsePoolState>;
}

export interface PoolStateClient extends Client {
  getPoolState(
    request: RequestPoolState,
    callback: (error: ServiceError | null, response: ResponsePoolState) => void,
  ): ClientUnaryCall;
  getPoolState(
    request: RequestPoolState,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResponsePoolState) => void,
  ): ClientUnaryCall;
  getPoolState(
    request: RequestPoolState,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResponsePoolState) => void,
  ): ClientUnaryCall;
}

export const PoolStateClient = makeGenericClientConstructor(PoolStateService, "PoolState") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PoolStateClient;
  service: typeof PoolStateService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
