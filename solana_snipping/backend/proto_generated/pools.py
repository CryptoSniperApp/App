# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: pools.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto
import grpclib


@dataclass
class ResponsePoolState(betterproto.Message):
    base_decimal: int = betterproto.int32_field(1)
    quote_decimal: int = betterproto.int32_field(2)
    base_token_amount: str = betterproto.string_field(3)
    quote_token_amount: str = betterproto.string_field(4)
    base_token_address: str = betterproto.string_field(5)
    quote_token_address: str = betterproto.string_field(6)
    base_mint: str = betterproto.string_field(7)
    quote_mint: str = betterproto.string_field(8)


@dataclass
class ErrorMesssage(betterproto.Message):
    error: str = betterproto.string_field(1)


@dataclass
class RequestPoolState(betterproto.Message):
    pool_data: bytes = betterproto.bytes_field(1)


@dataclass
class ResponsePoolStateOperation(betterproto.Message):
    error: "ErrorMesssage" = betterproto.message_field(1)
    data: "ResponsePoolState" = betterproto.message_field(2)


@dataclass
class RequestSwapTokens(betterproto.Message):
    transaction_type: str = betterproto.string_field(1)
    mint: str = betterproto.string_field(2)
    amount: float = betterproto.float_field(3)
    microlamports: float = betterproto.float_field(4)
    slippage: float = betterproto.float_field(5)
    private_key: str = betterproto.string_field(6)
    close_account: bool = betterproto.bool_field(7)
    swap_all: bool = betterproto.bool_field(8)
    token_account_address: str = betterproto.string_field(9)
    decimal: int = betterproto.int32_field(10)


@dataclass
class ResponseSwapTokens(betterproto.Message):
    error: str = betterproto.string_field(1)
    tx_signature: str = betterproto.string_field(2)
    ms_time_taken: str = betterproto.string_field(3)
    success: bool = betterproto.bool_field(4)


@dataclass
class CreateTokenAccount(betterproto.Message):
    # Create token account for this mint
    mint: str = betterproto.string_field(1)
    # Payer and signer of the transaction (wallet private key)
    private_key: str = betterproto.string_field(2)
    # Associated token account address (public key)
    ata_public_key: str = betterproto.string_field(3)


@dataclass
class ResponseCreateTokenAccount(betterproto.Message):
    error: str = betterproto.string_field(1)
    success: bool = betterproto.bool_field(2)
    tx_signature: str = betterproto.string_field(3)
    ms_time_taken: str = betterproto.string_field(4)


@dataclass
class CloseTokenAccount(betterproto.Message):
    # Payer and signer of the transaction (wallet private key)
    wallet_private_key: str = betterproto.string_field(1)
    # Token account address to close
    token_account_address: str = betterproto.string_field(2)


@dataclass
class ResponseCloseTokenAccount(betterproto.Message):
    error: str = betterproto.string_field(1)
    success: bool = betterproto.bool_field(2)
    tx_signature: str = betterproto.string_field(3)
    ms_time_taken: str = betterproto.string_field(4)


@dataclass
class GetAssociatedTokenAccount(betterproto.Message):
    # Mint address for associated token account
    mint_address: str = betterproto.string_field(1)
    # Wallet public key
    wallet_public_key: str = betterproto.string_field(2)


@dataclass
class ResponseGetAssociatedTokenAccount(betterproto.Message):
    ata_public_key: str = betterproto.string_field(1)
    error: str = betterproto.string_field(2)
    success: bool = betterproto.bool_field(3)
    ms_time_taken: str = betterproto.string_field(4)


class PoolStateStub(betterproto.ServiceStub):
    async def get_pool_state(
        self, *, pool_data: bytes = b""
    ) -> ResponsePoolStateOperation:
        request = RequestPoolState()
        request.pool_data = pool_data

        return await self._unary_unary(
            "/.PoolState/getPoolState",
            request,
            ResponsePoolStateOperation,
        )


class TokensSolanaStub(betterproto.ServiceStub):
    async def swap_tokens(
        self,
        *,
        transaction_type: str = "",
        mint: str = "",
        amount: float = 0,
        microlamports: float = 0,
        slippage: float = 0,
        private_key: str = "",
        close_account: bool = False,
        swap_all: bool = False,
        token_account_address: str = "",
        decimal: int = 0,
    ) -> ResponseSwapTokens:
        request = RequestSwapTokens()
        request.transaction_type = transaction_type
        request.mint = mint
        request.amount = amount
        request.microlamports = microlamports
        request.slippage = slippage
        request.private_key = private_key
        request.close_account = close_account
        request.swap_all = swap_all
        request.token_account_address = token_account_address
        request.decimal = decimal

        return await self._unary_unary(
            "/TokensSolana/swapTokens",
            request,
            ResponseSwapTokens,
        )

    async def create_token_account(
        self, *, mint: str = "", private_key: str = "", ata_public_key: str = ""
    ) -> ResponseCreateTokenAccount:
        request = CreateTokenAccount()
        request.mint = mint
        request.private_key = private_key
        request.ata_public_key = ata_public_key

        return await self._unary_unary(
            "/TokensSolana/createTokenAccount",
            request,
            ResponseCreateTokenAccount,
        )

    async def close_token_account(
        self, *, wallet_private_key: str = "", token_account_address: str = ""
    ) -> ResponseCloseTokenAccount:
        request = CloseTokenAccount()
        request.wallet_private_key = wallet_private_key
        request.token_account_address = token_account_address

        return await self._unary_unary(
            "/TokensSolana/closeTokenAccount",
            request,
            ResponseCloseTokenAccount,
        )

    async def get_associated_token_account(
        self, *, mint_address: str = "", wallet_public_key: str = ""
    ) -> ResponseGetAssociatedTokenAccount:
        request = GetAssociatedTokenAccount()
        request.mint_address = mint_address
        request.wallet_public_key = wallet_public_key

        return await self._unary_unary(
            "/TokensSolana/getAssociatedTokenAccount",
            request,
            ResponseGetAssociatedTokenAccount,
        )
